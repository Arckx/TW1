!function(l){window.llms=window.llms||{};window.llms.analytics=new function(){return this.charts_loaded=!1,this.data={},this.query=l.parseJSON(l("#llms-analytics-json").text()),this.timeout=8e3,this.$widgets=l(".llms-widget[data-method]"),this.init=function(){google.charts.load("current",{packages:["corechart"]}),google.charts.setOnLoadCallback(this.charts_ready),this.bind(),this.load_widgets()},this.bind=function(){l(".llms-datepicker").datepicker({dateFormat:"yy-mm-dd",maxDate:0}),l("#llms-students-ids-filter").llmsStudentsSelect2({multiple:!0,placeholder:LLMS.l10n.translate("Filter by Student(s)"),allow_clear:!0}),l('a[href="#llms-toggle-filters"]').on("click",function(t){t.preventDefault(),l(".llms-analytics-filters").slideToggle(100)}),l("#llms-custom-date-submit").on("click",function(){l('input[name="range"]').val("custom")}),l("#llms-date-quick-filters a.llms-nav-link[data-range]").on("click",function(t){t.preventDefault(),l('input[name="range"]').val(l(this).attr("data-range")),l("form.llms-reporting-nav").submit()})},this.charts_ready=function(){window.llms.analytics.charts_loaded=!0,window.llms.analytics.draw_chart()},this.draw_chart=function(){if(this.charts_loaded&&this.is_loading_finished()){var t=document.getElementById("llms-charts-wrapper");if(t){var a=new google.visualization.ComboChart(t),e=this.get_chart_data(),i={chartArea:{height:"75%",width:"85%"},colors:["#606C38","#E85D75","#EF8354","#C64191","#731963"],height:560,lineWidth:4,seriesType:"bars",series:this.get_chart_series_options(),vAxes:{0:{format:"currency"},1:{format:""}}};e.length&&((e=google.visualization.arrayToDataTable(e)).sort([{column:0}]),a.draw(e,i))}}},this.is_loading_finished=function(){return!l(".llms-widget.is-loading").length},this.load_widgets=function(){var t=this;this.$widgets.each(function(){t.load_widget(l(this))})},this.load_widget=function(a){var e,i=this,s=a.attr("data-method"),r=a.find("h1"),n=a.find(".llms-reload-widget"),d=LLMS.l10n.translate("Error");a.addClass("is-loading"),l.ajax({data:{action:"llms_widget_"+s,dates:i.query.dates,courses:i.query.current_courses,memberships:i.query.current_memberships,students:i.query.current_students},method:"POST",timeout:i.timeout,url:window.ajaxurl,success:function(t){e="success",void 0!==t.response&&(d=t.response,i.data[s]={chart_data:t.chart_data,response:t.response,results:t.results},n.remove())},error:function(t){e="error"},complete:function(t){"error"===e&&(d="timeout"===t.statusText?LLMS.l10n.translate("Request timed out"):LLMS.l10n.translate("Error"),n.length||((n=l('<a class="llms-reload-widget" href="#">'+LLMS.l10n.translate("Retry")+"</a>")).on("click",function(t){t.preventDefault(),i.load_widget(a)}),a.append(n))),a.removeClass("is-loading"),r.html(d),i.widget_finished(a)}})},this.get_date_diff=function(){var t=new Date(this.query.dates.end),a=new Date(this.query.dates.start);return Math.abs(t.getTime()-a.getTime())},this.get_chart_data_object=function(){var t,a,e,i,s=this,r=this.get_date_diff(),n={};for(var d in s.data)if(s.data.hasOwnProperty(d)&&"object"==typeof s.data[d].chart_data&&"object"==typeof s.data[d].results&&(t=s.data[d].results))for(a=0;a<t.length;a++)switch(e=this.init_date(t[a].date),n[i=r<=10368e6?new Date(e.getFullYear(),e.getMonth(),e.getDate()):new Date(e.getFullYear(),e.getMonth(),1)]||(n[i]=this.get_empty_data_object(i)),s.data[d].chart_data.type){case"amount":n[i][d]=n[i][d]+ +t[a][s.data[d].chart_data.key];break;case"count":default:n[i][d]++}return n},this.get_chart_data=function(){var t=this.get_chart_data_object(),a=this.get_chart_headers();for(var e in t)if(t.hasOwnProperty(e)){var i=[t[e]._date];for(var s in t[e])t[e].hasOwnProperty(s)&&0!==s.indexOf("_")&&i.push(t[e][s]);a.push(i)}return a},this.get_empty_data_object=function(t){var a=this,e={_date:t};for(var i in a.data)a.data.hasOwnProperty(i)&&a.data[i].chart_data&&(e[i]=0);return e},this.get_chart_headers=function(){var t=this,a=[];for(var e in a.push({label:LLMS.l10n.translate("Date"),id:"date",type:"date"}),t.data)t.data.hasOwnProperty(e)&&t.data[e].chart_data&&a.push(t.data[e].chart_data.header);return[a]},this.get_chart_series_options=function(){var t=this,a={};for(var e in i=0,t.data)if(t.data.hasOwnProperty(e)&&t.data[e].chart_data){var s=t.data[e].chart_data.type;a[i]={type:"count"===s?"bars":"line",targetAxisIndex:"count"===s?1:0},i++}return a},this.init_date=function(t){var a,e,i;return e=(a=t.split(" "))[0].split("-"),i=a[1].split(":"),new Date(e[0],e[1]-1,e[2],i[0],i[1],i[2])},this.widget_finished=function(t){this.is_loading_finished()&&this.draw_chart()},this.init(),this}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxsbXMtYW5hbHl0aWNzLmpzIl0sIm5hbWVzIjpbIiQiLCJ3aW5kb3ciLCJsbG1zIiwiYW5hbHl0aWNzIiwidGhpcyIsImNoYXJ0c19sb2FkZWQiLCJkYXRhIiwicXVlcnkiLCJwYXJzZUpTT04iLCJ0ZXh0IiwidGltZW91dCIsIiR3aWRnZXRzIiwiaW5pdCIsImdvb2dsZSIsImNoYXJ0cyIsImxvYWQiLCJwYWNrYWdlcyIsInNldE9uTG9hZENhbGxiYWNrIiwiY2hhcnRzX3JlYWR5IiwiYmluZCIsImxvYWRfd2lkZ2V0cyIsImRhdGVwaWNrZXIiLCJkYXRlRm9ybWF0IiwibWF4RGF0ZSIsImxsbXNTdHVkZW50c1NlbGVjdDIiLCJtdWx0aXBsZSIsInBsYWNlaG9sZGVyIiwiTExNUyIsImwxMG4iLCJ0cmFuc2xhdGUiLCJhbGxvd19jbGVhciIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic2xpZGVUb2dnbGUiLCJ2YWwiLCJhdHRyIiwic3VibWl0IiwiZHJhd19jaGFydCIsImlzX2xvYWRpbmdfZmluaXNoZWQiLCJlbCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGFydCIsInZpc3VhbGl6YXRpb24iLCJDb21ib0NoYXJ0IiwiZ2V0X2NoYXJ0X2RhdGEiLCJvcHRpb25zIiwiY2hhcnRBcmVhIiwiaGVpZ2h0Iiwid2lkdGgiLCJjb2xvcnMiLCJsaW5lV2lkdGgiLCJzZXJpZXNUeXBlIiwic2VyaWVzIiwiZ2V0X2NoYXJ0X3Nlcmllc19vcHRpb25zIiwidkF4ZXMiLCIwIiwiZm9ybWF0IiwiMSIsImxlbmd0aCIsImFycmF5VG9EYXRhVGFibGUiLCJzb3J0IiwiY29sdW1uIiwiZHJhdyIsInNlbGYiLCJlYWNoIiwibG9hZF93aWRnZXQiLCIkd2lkZ2V0Iiwic3RhdHVzIiwibWV0aG9kIiwiJGNvbnRlbnQiLCJmaW5kIiwiJHJldHJ5IiwiY29udGVudF90ZXh0IiwiYWRkQ2xhc3MiLCJhamF4IiwiYWN0aW9uIiwiZGF0ZXMiLCJjb3Vyc2VzIiwiY3VycmVudF9jb3Vyc2VzIiwibWVtYmVyc2hpcHMiLCJjdXJyZW50X21lbWJlcnNoaXBzIiwic3R1ZGVudHMiLCJjdXJyZW50X3N0dWRlbnRzIiwidXJsIiwiYWpheHVybCIsInN1Y2Nlc3MiLCJyIiwicmVzcG9uc2UiLCJjaGFydF9kYXRhIiwicmVzdWx0cyIsInJlbW92ZSIsImVycm9yIiwiY29tcGxldGUiLCJzdGF0dXNUZXh0IiwiYXBwZW5kIiwicmVtb3ZlQ2xhc3MiLCJodG1sIiwid2lkZ2V0X2ZpbmlzaGVkIiwiZ2V0X2RhdGVfZGlmZiIsImVuZCIsIkRhdGUiLCJzdGFydCIsIk1hdGgiLCJhYnMiLCJnZXRUaW1lIiwiZ2V0X2NoYXJ0X2RhdGFfb2JqZWN0IiwicmVzIiwiaSIsImQiLCJkYXRlIiwiZGlmZiIsImhhc093blByb3BlcnR5IiwiaW5pdF9kYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRfZW1wdHlfZGF0YV9vYmplY3QiLCJ0eXBlIiwia2V5Iiwib2JqIiwiZ2V0X2NoYXJ0X2hlYWRlcnMiLCJyb3ciLCJfZGF0ZSIsIml0ZW0iLCJpbmRleE9mIiwicHVzaCIsImgiLCJsYWJlbCIsImlkIiwiaGVhZGVyIiwidGFyZ2V0QXhpc0luZGV4Iiwic3RyaW5nIiwicGFydHMiLCJ0aW1lIiwic3BsaXQiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJDQVFHLFNBQVlBLEdBRWRDLE9BQU9DLEtBQU9ELE9BQU9DLE1BQVEsR0FpakI3QkQsT0FBT0MsS0FBS0MsVUFBWSxJQXppQlIsV0FxaUJmLE9BbmlCQUMsS0FBS0MsZUFBZ0IsRUFDckJELEtBQUtFLEtBQWdCLEdBQ3JCRixLQUFLRyxNQUFnQlAsRUFBRVEsVUFBV1IsRUFBRyx3QkFBeUJTLFFBQzlETCxLQUFLTSxRQUFnQixJQUVyQk4sS0FBS08sU0FBV1gsRUFBRyw2QkFTbkJJLEtBQUtRLEtBQU8sV0FFWEMsT0FBT0MsT0FBT0MsS0FBTSxVQUFXLENBQzlCQyxTQUFVLENBQ1QsZUFHRkgsT0FBT0MsT0FBT0cs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QyxFQUFFRCxLQUFNOUQsRUFBSzNELEtBQU1nRSxHQUFTb0IsV0FBV3lDLFFBS3pDLE1BQU8sQ0FBRUgsSUFZVjVILEtBQUttRCx5QkFBMkIsV0FFL0IsSUFBSVUsRUFBVTdELEtBQ2IyQyxFQUFVLEdBR1gsSUFBTSxJQUFJdUIsS0FGVHVDLEVBQVUsRUFFUzVDLEVBQUszRCxLQUN4QixHQUFPMkQsRUFBSzNELEtBQUsyRyxlQUFnQjNDLElBSTVCTCxFQUFLM0QsS0FBTWdFLEdBQVNvQixXQUFhLENBRXJDLElBQUk2QixFQUFPdEQsRUFBSzNELEtBQU1nRSxHQUFTb0IsV0FBVzZCLEtBRTFDeEUsRUFBUzhELEdBQU0sQ0FDZFUsS0FBUSxVQUFZQSxFQUFTLE9BQVMsT0FDdENhLGdCQUFtQixVQUFZYixFQUFTLEVBQUksR0FHN0NWLElBTUYsT0FBTzlELEdBWVIzQyxLQUFLOEcsVUFBWSxTQUFVbUIsR0FFMUIsSUFBSUMsRUFBT3ZCLEVBQU13QixFQU9qQixPQUhBeEIsR0FGQXVCLEVBQVFELEVBQU9HLE1BQU8sTUFFVCxHQUFHQSxNQUFPLEtBQ3ZCRCxFQUFPRCxFQUFNLEdBQUdFLE1BQU8sS0FFaEIsSUFBSWxDLEtBQU1TLEVBQUssR0FBSUEsRUFBSyxHQUFLLEVBQUdBLEVBQUssR0FBSXdCLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEtBYXhFbkksS0FBSytGLGdCQUFrQixTQUFVL0IsR0FFM0JoRSxLQUFLbUMsdUJBQ1RuQyxLQUFLa0MsY0FNUGxDLEtBQUtRLE9BR0VSLE1BL2lCTixDQXFqQkVxSSIsImZpbGUiOiJsbG1zLWFuYWx5dGljcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyI7LyoqXG4gKiBMaWZ0ZXJMTVMgQWRtaW4gUmVwb3J0aW5nIFdpZGdldHMgJiBDaGFydHNcbiAqXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBzaW5jZSAzLjE3LjIgVW5rbm93bi5cbiAqIEBzaW5jZSAzLjMzLjEgRml4IGlzc3VlIHRoYXQgcHJvZHVjZWQgc2VyaWVzIG9wdGlvbnMgbm90IGFsaWduZWQgd2l0aCB0aGUgY2hhcnQgZGF0YS5cbiAqIEBzaW5jZSAzLjM2LjMgQWRkZWQgdGhlIGBhbGxvd19jbGVhcmAgcGFyYW1hdGVyIHdoZW4gaW5pdGlhbGl6aWluZyB0aGUgYGxsbXNTdHVkZW50U2VsZWN0MmAuXG4gKlxuICovKCBmdW5jdGlvbiggJCwgdW5kZWZpbmVkICkge1xuXG5cdHdpbmRvdy5sbG1zID0gd2luZG93LmxsbXMgfHwge307XG5cblx0LyoqXG5cdCAqIExpZnRlckxNUyBBZG1pbiBBbmFseXRpY3Ncblx0ICpcblx0ICogQHNpbmNlICAgIDMuMC4wXG5cdCAqIEB2ZXJzaW9uICAzLjUuMFxuXHQgKi9cblx0dmFyIEFuYWx5dGljcyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0dGhpcy5jaGFydHNfbG9hZGVkID0gZmFsc2U7XG5cdFx0dGhpcy5kYXRhICAgICAgICAgID0ge307XG5cdFx0dGhpcy5xdWVyeSAgICAgICAgID0gJC5wYXJzZUpTT04oICQoICcjbGxtcy1hbmFseXRpY3MtanNvbicgKS50ZXh0KCkgKTtcblx0XHR0aGlzLnRpbWVvdXQgICAgICAgPSA4MDAwO1xuXG5cdFx0dGhpcy4kd2lkZ2V0cyA9ICQoICcubGxtcy13aWRnZXRbZGF0YS1tZXRob2RdJyApO1xuXG5cdFx0LyoqXG5cdFx0ICogSW5pdGlhbGl6ZXJcblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMC4wXG5cdFx0ICovXG5cdFx0dGhpcy5pbml0ID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdGdvb2dsZS5jaGFydHMubG9hZCggJ2N1cnJlbnQnLCB7XG5cdFx0XHRcdHBhY2thZ2VzOiBbXG5cdFx0XHRcdFx0J2NvcmVjaGFydCdcblx0XHRcdFx0XVxuXHRcdFx0fSApO1xuXHRcdFx0Z29vZ2xlLmNoYXJ0cy5zZXRPbkxvYWRDYWxsYmFjayggdGhpcy5jaGFydHNfcmVhZHkgKTtcblxuXHRcdFx0dGhpcy5iaW5kKCk7XG5cdFx0XHR0aGlzLmxvYWRfd2lkZ2V0cygpO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEJpbmQgRE9NIGV2ZW50c1xuXHRcdCAqXG5cdFx0ICogQHNpbmNlIDMuMC4wXG5cdFx0ICogQHNpbmNlIDMuMzYuMyBBZGRlZCB0aGUgYGFsbG93X2NsZWFyYCBwYXJhbWF0ZXIgd2hlbiBpbml0aWFsaXppaW5nIHRoZSBgbGxtc1N0dWRlbnRTZWxlY3QyYC5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gdm9pZFxuXHRcdCAqL1xuXHRcdHRoaXMuYmluZCA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQkKCAnLmxsbXMtZGF0ZXBpY2tlcicgKS5kYXRlcGlja2VyKCB7XG5cdFx0XHRcdGRhdGVGb3JtYXQ6ICd5eS1tbS1kZCcsXG5cdFx0XHRcdG1heERhdGU6IDAsXG5cdFx0XHR9ICk7XG5cblx0XHRcdCQoICcjbGxtcy1zdHVkZW50cy1pZHMtZmlsdGVyJyApLmxsbXNTdHVkZW50c1NlbGVjdDIoIHtcblx0XHRcdFx0bXVsdGlwbGU6IHRydWUsXG5cdFx0XHRcdHBsYWNlaG9sZGVyOiBMTE1TLmwxMG4udHJhbnNsYXRlKCAnRmlsdGVyIGJ5IFN0dWRlbnQocyknICksXG5cdFx0XHRcdGFsbG93X2NsZWFyOiB0cnVlLFxuXHRcdFx0fSApO1xuXG5cdFx0XHQkKCAnYVtocmVmPVwiI2xsbXMtdG9nZ2xlLWZpbHRlcnNcIl0nICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBlICkge1xuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdCQoICcubGxtcy1hbmFseXRpY3MtZmlsdGVycycgKS5zbGlkZVRvZ2dsZSggMTAwICk7XG5cdFx0XHR9ICk7XG5cblx0XHRcdCQoICcjbGxtcy1jdXN0b20tZGF0ZS1zdWJtaXQnICkub24oICdjbGljaycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCAnaW5wdXRbbmFtZT1cInJhbmdlXCJdJyApLnZhbCggJ2N1c3RvbScgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0JCggJyNsbG1zLWRhdGUtcXVpY2stZmlsdGVycyBhLmxsbXMtbmF2LWxpbmtbZGF0YS1yYW5nZV0nICkub24oICdjbGljaycsIGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0JCggJ2lucHV0W25hbWU9XCJyYW5nZVwiXScgKS52YWwoICQoIHRoaXMgKS5hdHRyKCAnZGF0YS1yYW5nZScgKSApO1xuXG5cdFx0XHRcdCQoICdmb3JtLmxsbXMtcmVwb3J0aW5nLW5hdicgKS5zdWJtaXQoKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENhbGxlZCAgYnkgR29vZ2xlIENoYXJ0cyB3aGVuIHRoZSBsaWJyYXJ5IGlzIGxvYWRlZCBhbmQgcmVhZHlcblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMC4wXG5cdFx0ICovXG5cdFx0dGhpcy5jaGFydHNfcmVhZHkgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0d2luZG93LmxsbXMuYW5hbHl0aWNzLmNoYXJ0c19sb2FkZWQgPSB0cnVlO1xuXHRcdFx0d2luZG93LmxsbXMuYW5hbHl0aWNzLmRyYXdfY2hhcnQoKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZW5kZXIgdGhlIGNoYXJ0XG5cdFx0ICpcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjAuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjE3LjZcblx0XHQgKi9cblx0XHR0aGlzLmRyYXdfY2hhcnQgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0aWYgKCAhIHRoaXMuY2hhcnRzX2xvYWRlZCB8fCAhIHRoaXMuaXNfbG9hZGluZ19maW5pc2hlZCgpICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAnbGxtcy1jaGFydHMtd3JhcHBlcicgKTtcblxuXHRcdFx0aWYgKCAhIGVsICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzZWxmICAgID0gdGhpcyxcblx0XHRcdFx0Y2hhcnQgICA9IG5ldyBnb29nbGUudmlzdWFsaXphdGlvbi5Db21ib0NoYXJ0KCBlbCApLFxuXHRcdFx0XHRkYXRhICAgID0gc2VsZi5nZXRfY2hhcnRfZGF0YSgpLFxuXHRcdFx0XHRvcHRpb25zID0ge1xuXHRcdFx0XHRcdGNoYXJ0QXJlYToge1xuXHRcdFx0XHRcdFx0aGVpZ2h0OiAnNzUlJyxcblx0XHRcdFx0XHRcdHdpZHRoOiAnODUlJyxcblx0XHRcdFx0XHRcdC8vIGJvdHRvbTogMjAsXG5cdFx0XHRcdFx0XHQvLyBsZWZ0OiAyMCxcblx0XHRcdFx0XHRcdC8vIHJpZ2h0OiAyMCxcblx0XHRcdFx0XHRcdC8vIHRvcDogMjAsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjb2xvcnM6IFsnIzYwNkMzOCcsJyNFODVENzUnLCcjRUY4MzU0JywnI0M2NDE5MScsJyM3MzE5NjMnXSxcblx0XHRcdFx0XHRoZWlnaHQ6IDU2MCxcblx0XHRcdFx0XHRsaW5lV2lkdGg6IDQsXG5cdFx0XHRcdFx0c2VyaWVzVHlwZTogJ2JhcnMnLFxuXHRcdFx0XHRcdHNlcmllczogc2VsZi5nZXRfY2hhcnRfc2VyaWVzX29wdGlvbnMoKSxcblx0XHRcdFx0XHR2QXhlczoge1xuXHRcdFx0XHRcdFx0MDoge1xuXHRcdFx0XHRcdFx0XHRmb3JtYXQ6ICdjdXJyZW5jeScsXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0MToge1xuXHRcdFx0XHRcdFx0XHRmb3JtYXQ6ICcnLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0fTtcblx0XHRcdFx0Ly8gZGF0YSA9IGdvb2dsZS52aXN1YWxpemF0aW9uLmFycmF5VG9EYXRhVGFibGUoIFtcblx0XHRcdFx0Ly8gWydNb250aCcsICdCb2xpdmlhJywgJ0VjdWFkb3InLCAnTWFkYWdhc2NhcicsICdQYXB1YSBOZXcgR3VpbmVhJywgJ1J3YW5kYScsICdBdmVyYWdlJ10sXG5cdFx0XHRcdC8vIFsnMjAwNC8wNScsICAxNjUsICAgICAgOTM4LCAgICAgICAgIDUyMiwgICAgICAgICAgICAgOTk4LCAgICAgICAgICAgNDUwLCAgICAgIDYxNC42XSxcblx0XHRcdFx0Ly8gWycyMDA1LzA2JywgIDEzNSwgICAgICAxMTIwLCAgICAgICAgNTk5LCAgICAgICAgICAgICAxMjY4LCAgICAgICAgICAyODgsICAgICAgNjgyXSxcblx0XHRcdFx0Ly8gWycyMDA2LzA3JywgIDE1NywgICAgICAxMTY3LCAgICAgICAgNTg3LCAgICAgICAgICAgICA4MDcsICAgICAgICAgICAzOTcsICAgICAgNjIzXSxcblx0XHRcdFx0Ly8gWycyMDA3LzA4JywgIDEzOSwgICAgICAxMTEwLCAgICAgICAgNjE1LCAgICAgICAgICAgICA5NjgsICAgICAgICAgICAyMTUsICAgICAgNjA5LjRdLFxuXHRcdFx0XHQvLyBbJzIwMDgvMDknLCAgMTM2LCAgICAgIDY5MSwgICAgICAgICA2MjksICAgICAgICAgICAgIDEwMjYsICAgICAgICAgIDM2NiwgICAgICA1NjkuNl1cblx0XHRcdFx0Ly8gXSApXG5cblx0XHRcdGlmICggZGF0YS5sZW5ndGggKSB7XG5cblx0XHRcdFx0ZGF0YSA9IGdvb2dsZS52aXN1YWxpemF0aW9uLmFycmF5VG9EYXRhVGFibGUoIGRhdGEgKTtcblx0XHRcdFx0ZGF0YS5zb3J0KCBbe2NvbHVtbjogMH1dICk7XG5cdFx0XHRcdGNoYXJ0LmRyYXcoIGRhdGEsIG9wdGlvbnMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENoZWNrIGlmIGEgd2lkZ2V0IGlzIHN0aWxsIGxvYWRpbmdcblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gICBib29sXG5cdFx0ICogQHNpbmNlICAgIDMuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMC4wXG5cdFx0ICovXG5cdFx0dGhpcy5pc19sb2FkaW5nX2ZpbmlzaGVkID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICQoICcubGxtcy13aWRnZXQuaXMtbG9hZGluZycgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBTdGFydCBsb2FkaW5nIGFsbCB3aWRnZXRzIG9uIHRoZSBjdXJyZW50IHNjcmVlblxuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIHZvaWRcblx0XHQgKiBAc2luY2UgICAgMy4wLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4wLjBcblx0XHQgKi9cblx0XHR0aGlzLmxvYWRfd2lkZ2V0cyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdHRoaXMuJHdpZGdldHMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0c2VsZi5sb2FkX3dpZGdldCggJCggdGhpcyApICk7XG5cblx0XHRcdH0gKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBMb2FkIGEgc3BlY2lmaWMgd2lkZ2V0XG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gICAgb2JqICAgJHdpZGdldCAgalF1ZXJ5IHNlbGVjdG9yIG9mIHRoZSB3aWRnZXQgZWxlbWVudFxuXHRcdCAqIEByZXR1cm4gICB2b2lkXG5cdFx0ICogQHNpbmNlICAgIDMuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMTYuOFxuXHRcdCAqL1xuXHRcdHRoaXMubG9hZF93aWRnZXQgPSBmdW5jdGlvbiggJHdpZGdldCApIHtcblxuXHRcdFx0dmFyIHNlbGYgICAgICAgICA9IHRoaXMsXG5cdFx0XHRcdG1ldGhvZCAgICAgICA9ICR3aWRnZXQuYXR0ciggJ2RhdGEtbWV0aG9kJyApLFxuXHRcdFx0XHQkY29udGVudCAgICAgPSAkd2lkZ2V0LmZpbmQoICdoMScgKSxcblx0XHRcdFx0JHJldHJ5ICAgICAgID0gJHdpZGdldC5maW5kKCAnLmxsbXMtcmVsb2FkLXdpZGdldCcgKSxcblx0XHRcdFx0Y29udGVudF90ZXh0ID0gTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0Vycm9yJyApLFxuXHRcdFx0XHRzdGF0dXM7XG5cblx0XHRcdCR3aWRnZXQuYWRkQ2xhc3MoICdpcy1sb2FkaW5nJyApO1xuXG5cdFx0XHQkLmFqYXgoIHtcblxuXHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0YWN0aW9uOiAnbGxtc193aWRnZXRfJyArIG1ldGhvZCxcblx0XHRcdFx0XHRkYXRlczogc2VsZi5xdWVyeS5kYXRlcyxcblx0XHRcdFx0XHRjb3Vyc2VzOiBzZWxmLnF1ZXJ5LmN1cnJlbnRfY291cnNlcyxcblx0XHRcdFx0XHRtZW1iZXJzaGlwczogc2VsZi5xdWVyeS5jdXJyZW50X21lbWJlcnNoaXBzLFxuXHRcdFx0XHRcdHN0dWRlbnRzOiBzZWxmLnF1ZXJ5LmN1cnJlbnRfc3R1ZGVudHMsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHR0aW1lb3V0OiBzZWxmLnRpbWVvdXQsXG5cdFx0XHRcdHVybDogd2luZG93LmFqYXh1cmwsXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCByICkge1xuXG5cdFx0XHRcdFx0c3RhdHVzID0gJ3N1Y2Nlc3MnO1xuXG5cdFx0XHRcdFx0aWYgKCAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIHIucmVzcG9uc2UgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnRlbnRfdGV4dCA9IHIucmVzcG9uc2U7XG5cblx0XHRcdFx0XHRcdHNlbGYuZGF0YVttZXRob2RdID0ge1xuXHRcdFx0XHRcdFx0XHRjaGFydF9kYXRhOiByLmNoYXJ0X2RhdGEsXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlOiByLnJlc3BvbnNlLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzOiByLnJlc3VsdHMsXG5cdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHQkcmV0cnkucmVtb3ZlKCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKCByICkge1xuXG5cdFx0XHRcdFx0c3RhdHVzID0gJ2Vycm9yJztcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjb21wbGV0ZTogZnVuY3Rpb24oIHIgKSB7XG5cblx0XHRcdFx0XHRpZiAoICdlcnJvcicgPT09IHN0YXR1cyApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCAndGltZW91dCcgPT09IHIuc3RhdHVzVGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHRjb250ZW50X3RleHQgPSBMTE1TLmwxMG4udHJhbnNsYXRlKCAnUmVxdWVzdCB0aW1lZCBvdXQnICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Y29udGVudF90ZXh0ID0gTExNUy5sMTBuLnRyYW5zbGF0ZSggJ0Vycm9yJyApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggISAkcmV0cnkubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHRcdCRyZXRyeSA9ICQoICc8YSBjbGFzcz1cImxsbXMtcmVsb2FkLXdpZGdldFwiIGhyZWY9XCIjXCI+JyArIExMTVMubDEwbi50cmFuc2xhdGUoICdSZXRyeScgKSArICc8L2E+JyApO1xuXHRcdFx0XHRcdFx0XHQkcmV0cnkub24oICdjbGljaycsIGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYubG9hZF93aWRnZXQoICR3aWRnZXQgKTtcblxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0XHRcdFx0JHdpZGdldC5hcHBlbmQoICRyZXRyeSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQkd2lkZ2V0LnJlbW92ZUNsYXNzKCAnaXMtbG9hZGluZycgKTtcblx0XHRcdFx0XHQkY29udGVudC5odG1sKCBjb250ZW50X3RleHQgKTtcblxuXHRcdFx0XHRcdHNlbGYud2lkZ2V0X2ZpbmlzaGVkKCAkd2lkZ2V0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9ICk7XG5cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogR2V0IHRoZSB0aW1lIGluIHNlY29uZHMgYmV0d2VlbiB0aGUgcXVlcmllZCBkYXRlc1xuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIGludFxuXHRcdCAqIEBzaW5jZSAgICAzLjAuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjAuMFxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0X2RhdGVfZGlmZiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgZW5kICAgPSBuZXcgRGF0ZSggdGhpcy5xdWVyeS5kYXRlcy5lbmQgKSxcblx0XHRcdFx0c3RhcnQgPSBuZXcgRGF0ZSggdGhpcy5xdWVyeS5kYXRlcy5zdGFydCApO1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5hYnMoIGVuZC5nZXRUaW1lKCkgLSBzdGFydC5nZXRUaW1lKCkgKTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBCdWlsZHMgYW4gb2JqZWN0IG9mIGRhdGEgdGhhdCBjYW4gYmUgdXNlZCB0bywgdWx0aW1hdGVseSwgZHJhdyB0aGUgc2NyZWVuJ3MgY2hhcnRcblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4wLjBcblx0XHQgKiBAdmVyc2lvbiAgMy4xLjZcblx0XHQgKi9cblx0XHR0aGlzLmdldF9jaGFydF9kYXRhX29iamVjdCA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgc2VsZiAgICAgICAgID0gdGhpcyxcblx0XHRcdFx0bWF4X2Zvcl9kYXlzID0gKCAoIDEwMDAgKiAzNjAwICogMjQgKSAqIDMwICkgKiA0LCAvLyA0IG1vbnRocyBpbiBzZWNvbmRzXG5cdFx0XHRcdGRpZmYgICAgICAgICA9IHRoaXMuZ2V0X2RhdGVfZGlmZigpLFxuXHRcdFx0XHRkYXRhICAgICAgICAgPSB7fSxcblx0XHRcdFx0cmVzLCBpLCBkLCBkYXRlO1xuXG5cdFx0XHRmb3IgKCB2YXIgbWV0aG9kIGluIHNlbGYuZGF0YSApIHtcblxuXHRcdFx0XHRpZiAoICEgc2VsZi5kYXRhLmhhc093blByb3BlcnR5KCBtZXRob2QgKSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggJ29iamVjdCcgIT09IHR5cGVvZiBzZWxmLmRhdGFbIG1ldGhvZCBdLmNoYXJ0X2RhdGEgfHwgJ29iamVjdCcgIT09IHR5cGVvZiBzZWxmLmRhdGFbIG1ldGhvZCBdLnJlc3VsdHMgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXMgPSBzZWxmLmRhdGFbIG1ldGhvZCBdLnJlc3VsdHM7XG5cblx0XHRcdFx0aWYgKCByZXMgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKyApIHtcblxuXHRcdFx0XHRcdFx0ZCA9IHRoaXMuaW5pdF9kYXRlKCByZXNbaV0uZGF0ZSApO1xuXG5cdFx0XHRcdFx0XHQvLyBncm91cCBieSBkYXlzXG5cdFx0XHRcdFx0XHRpZiAoIGRpZmYgPD0gbWF4X2Zvcl9kYXlzICkge1xuXHRcdFx0XHRcdFx0XHRkYXRlID0gbmV3IERhdGUoIGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpLCBkLmdldERhdGUoKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gZ3JvdXAgYnkgbW9udGhzXG5cdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKCBkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSwgMSApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoICEgZGF0YVsgZGF0ZSBdICkge1xuXHRcdFx0XHRcdFx0XHRkYXRhWyBkYXRlIF0gPSB0aGlzLmdldF9lbXB0eV9kYXRhX29iamVjdCggZGF0ZSApXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN3aXRjaCAoIHNlbGYuZGF0YVsgbWV0aG9kIF0uY2hhcnRfZGF0YS50eXBlICkge1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgJ2Ftb3VudCc6XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YVsgZGF0ZSBdWyBtZXRob2QgXSA9IGRhdGFbIGRhdGUgXVsgbWV0aG9kIF0gKyAoIHJlc1tpXVsgc2VsZi5kYXRhWyBtZXRob2QgXS5jaGFydF9kYXRhLmtleSBdICogMSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0XHRjYXNlICdjb3VudCc6XG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YVsgZGF0ZSBdWyBtZXRob2QgXSsrO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBHZXQgdGhlIGRhdGEgZ29vZ2xlIGNoYXJ0cyBuZWVkcyB0byBpbml0aWF0ZSB0aGUgY3VycmVudCBjaGFydFxuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIG9ialxuXHRcdCAqIEBzaW5jZSAgICAzLjAuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjAuMFxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0X2NoYXJ0X2RhdGEgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0XHRvYmogID0gc2VsZi5nZXRfY2hhcnRfZGF0YV9vYmplY3QoKSxcblx0XHRcdFx0ZGF0YSA9IHNlbGYuZ2V0X2NoYXJ0X2hlYWRlcnMoKTtcblxuXHRcdFx0Zm9yICggdmFyIGRhdGUgaW4gb2JqICkge1xuXG5cdFx0XHRcdGlmICggISBvYmouaGFzT3duUHJvcGVydHkoIGRhdGUgKSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciByb3cgPSBbIG9ialsgZGF0ZSBdLl9kYXRlIF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGl0ZW0gaW4gb2JqWyBkYXRlIF0gKSB7XG5cdFx0XHRcdFx0aWYgKCAhIG9ialsgZGF0ZSBdLmhhc093blByb3BlcnR5KCBpdGVtICkgKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBza2lwIG1ldGEgaXRlbXNcblx0XHRcdFx0XHRpZiAoIDAgPT09IGl0ZW0uaW5kZXhPZiggJ18nICkgKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyb3cucHVzaCggb2JqWyBkYXRlIF1bIGl0ZW0gXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGF0YS5wdXNoKCByb3cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBHZXQgYSBzdHViIG9mIHRoZSBkYXRhIG9iamVjdCB1c2VkIGJ5IHRoaXMuZ2V0X2RhdGFfb2JqZWN0XG5cdFx0ICpcblx0XHQgKiBAcGFyYW0gICAgc3RyaW5nICAgZGF0ZSAgZGF0ZSB0byBpbnN0YW50aWF0ZSB0aGUgb2JqZWN0IHdpdGhcblx0XHQgKiBAcmV0dXJuICAgb2JqXG5cdFx0ICogQHNpbmNlICAgIDMuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMC4wXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRfZW1wdHlfZGF0YV9vYmplY3QgPSBmdW5jdGlvbiggZGF0ZSApIHtcblxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0XHRvYmogID0ge1xuXHRcdFx0XHRcdF9kYXRlOiBkYXRlLFxuXHRcdFx0fTtcblxuXHRcdFx0Zm9yICggdmFyIG1ldGhvZCBpbiBzZWxmLmRhdGEgKSB7XG5cdFx0XHRcdGlmICggISBzZWxmLmRhdGEuaGFzT3duUHJvcGVydHkoIG1ldGhvZCApICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWxmLmRhdGFbIG1ldGhvZCBdLmNoYXJ0X2RhdGEgKSB7XG5cdFx0XHRcdFx0b2JqWyBtZXRob2QgXSA9IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2JqO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEJ1aWxkcyBhbiBhcnJheSBvZiBjaGFydCBoZWFkZXIgZGF0YVxuXHRcdCAqXG5cdFx0ICogQHJldHVybiAgIGFycmF5XG5cdFx0ICogQHNpbmNlICAgIDMuMC4wXG5cdFx0ICogQHZlcnNpb24gIDMuMC4wXG5cdFx0ICovXG5cdFx0dGhpcy5nZXRfY2hhcnRfaGVhZGVycyA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdGggICAgPSBbXTtcblxuXHRcdFx0Ly8gZGF0ZSBoZWFkZXJzIGdvIGZpcnN0XG5cdFx0XHRoLnB1c2goIHtcblx0XHRcdFx0bGFiZWw6IExMTVMubDEwbi50cmFuc2xhdGUoICdEYXRlJyApLFxuXHRcdFx0XHRpZDogJ2RhdGUnLFxuXHRcdFx0XHR0eXBlOiAnZGF0ZScsXG5cdFx0XHR9ICk7XG5cblx0XHRcdGZvciAoIHZhciBtZXRob2QgaW4gc2VsZi5kYXRhICkge1xuXHRcdFx0XHRpZiAoICEgc2VsZi5kYXRhLmhhc093blByb3BlcnR5KCBtZXRob2QgKSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VsZi5kYXRhWyBtZXRob2QgXS5jaGFydF9kYXRhICkge1xuXHRcdFx0XHRcdGgucHVzaCggc2VsZi5kYXRhWyBtZXRob2QgXS5jaGFydF9kYXRhLmhlYWRlciApO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFsgaCBdO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEdldCBhIG9iamVjdCBvZiBzZXJpZXMgb3B0aW9ucyBuZWVkZWQgdG8gZHJhdyB0aGUgY2hhcnQuXG5cdFx0ICpcblx0XHQgKiBAc2luY2UgMy4wLjBcblx0XHQgKiBAc2luY2UgRml4IGlzc3VlIHRoYXQgcHJvZHVjZWQgc2VyaWVzIG9wdGlvbnMgbm90IGFsaWduZWQgd2l0aCB0aGUgY2hhcnQgZGF0YS5cblx0XHQgKlxuXHRcdCAqIEByZXR1cm4gdm9pZFxuXHRcdCAqL1xuXHRcdHRoaXMuZ2V0X2NoYXJ0X3Nlcmllc19vcHRpb25zID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBzZWxmICAgID0gdGhpcyxcblx0XHRcdFx0b3B0aW9ucyA9IHt9XG5cdFx0XHRcdGkgICAgICAgPSAwO1xuXG5cdFx0XHRmb3IgKCB2YXIgbWV0aG9kIGluIHNlbGYuZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhIHNlbGYuZGF0YS5oYXNPd25Qcm9wZXJ0eSggbWV0aG9kICkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlbGYuZGF0YVsgbWV0aG9kIF0uY2hhcnRfZGF0YSApIHtcblxuXHRcdFx0XHRcdHZhciB0eXBlID0gc2VsZi5kYXRhWyBtZXRob2QgXS5jaGFydF9kYXRhLnR5cGU7XG5cblx0XHRcdFx0XHRvcHRpb25zWyBpIF0gPSB7XG5cdFx0XHRcdFx0XHR0eXBlOiAoICdjb3VudCcgPT09IHR5cGUgKSA/ICdiYXJzJyA6ICdsaW5lJyxcblx0XHRcdFx0XHRcdHRhcmdldEF4aXNJbmRleDogKCAnY291bnQnID09PSB0eXBlICkgPyAxIDogMCxcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0aSsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3B0aW9ucztcblxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBJbnN0YW50aWF0ZSBhIERhdGUgaW5zdGFuY2UgdmlhIGEgZGF0ZSBzdHJpbmdcblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAgICBzdHJpbmcgICBzdHJpbmcgIGRhdGUgc3RyaW5nLCBleHBlY3RlZCBmb3JtYXQgc2hvdWxkIGJlIGZyb20gcGhwIGRhdGUoICdZLW0tZCBIOmk6cycgKVxuXHRcdCAqIEByZXR1cm4gICBvYmpcblx0XHQgKiBAc2luY2UgICAgMy4xLjRcblx0XHQgKiBAdmVyc2lvbiAgMy4xLjVcblx0XHQgKi9cblx0XHR0aGlzLmluaXRfZGF0ZSA9IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cblx0XHRcdHZhciBwYXJ0cywgZGF0ZSwgdGltZTtcblxuXHRcdFx0cGFydHMgPSBzdHJpbmcuc3BsaXQoICcgJyApO1xuXG5cdFx0XHRkYXRlID0gcGFydHNbMF0uc3BsaXQoICctJyApO1xuXHRcdFx0dGltZSA9IHBhcnRzWzFdLnNwbGl0KCAnOicgKTtcblxuXHRcdFx0cmV0dXJuIG5ldyBEYXRlKCBkYXRlWzBdLCBkYXRlWzFdIC0gMSwgZGF0ZVsyXSwgdGltZVswXSwgdGltZVsxXSwgdGltZVsyXSApO1xuXG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIENhbGxlZCB3aGVuIGEgd2lkZ2V0IGlzIGZpbmlzaGVkIGxvYWRpbmdcblx0XHQgKiBVcGRhdGVzIHRoZSBjdXJyZW50IGNoYXJ0IHdpdGggdGhlIG5ldyBkYXRhIGZyb20gdGhlIHdpZGdldFxuXHRcdCAqXG5cdFx0ICogQHBhcmFtICAgIG9iaiAgICR3aWRnZXQgIGpRdWVyeSBzZWxlY3RvciBvZiB0aGUgd2lkZ2V0IGVsZW1lbnRcblx0XHQgKiBAcmV0dXJuICAgdm9pZFxuXHRcdCAqIEBzaW5jZSAgICAzLjAuMFxuXHRcdCAqIEB2ZXJzaW9uICAzLjAuMFxuXHRcdCAqL1xuXHRcdHRoaXMud2lkZ2V0X2ZpbmlzaGVkID0gZnVuY3Rpb24oICR3aWRnZXQgKSB7XG5cblx0XHRcdGlmICggdGhpcy5pc19sb2FkaW5nX2ZpbmlzaGVkKCkgKSB7XG5cdFx0XHRcdHRoaXMuZHJhd19jaGFydCgpO1xuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHRcdC8vIGdvXG5cdFx0dGhpcy5pbml0KCk7XG5cblx0XHQvLyByZXR1cm5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHdpbmRvdy5sbG1zLmFuYWx5dGljcyA9IG5ldyBBbmFseXRpY3MoKTtcblxufSApKCBqUXVlcnkgKTtcbiJdfQ==
